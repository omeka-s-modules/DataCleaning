<?php
$tableFilterUrl = $this->assetUrl('vendor/tablefilter-0.7.2/tablefilter.js', 'DataCleaning');
$tableFilterBasePath = substr($tableFilterUrl, 0, strrpos($tableFilterUrl, '/') + 1);
$this->headScript()->appendFile($tableFilterUrl);
?>
<?php echo $this->pageTitle($this->translate('Audit data'), 1, $this->translate('Data Cleaning')); ?>
<dl>
    <dt><?php echo $this->translate('Item query'); ?></dt>
    <dd><?php echo http_build_query($itemQuery); ?></dd>
    <dt><?php echo $this->translate('Property'); ?></dt>
    <dd><?php echo sprintf('%s (%s)', $property->label(), $property->term()); ?></dd>
    <dt><?php echo $this->translate('Data type'); ?></dt>
    <dd><?php echo sprintf('%s (%s)', $dataType->getLabel(), $dataType->getName()); ?></dd>
    <dt><?php echo $this->translate('Audit column'); ?></dt>
    <dd><?php echo $auditColumn; ?></dd>
</dl>
<p><?php echo sprintf(
    $this->translate('You are auditing %s unique strings (%s total strings) from %s items.'),
    $stringsUniqueCount,
    $stringsTotalCount,
    $this->hyperlink(count($itemIds), $this->url('admin/default', ['controller' => 'item', 'action' => 'browse'], ['query' => $itemQuery]))
); ?></p>
<?php echo $this->form()->openTag($form); ?>
    <?php echo $this->formCollection($form); ?>
    <div id="page-actions">
        <?php echo $this->hyperlink($this->translate('Cancel'), $this->url(null, ['action' => 'index'], true), ['class' => 'button']); ?>
        <button><?php echo $this->translate('Submit'); ?></button>
    </div>
    <table id="strings-table" data-table-filter-base-path="<?php echo $this->escapeHtml($tableFilterBasePath); ?>">
    <thead>
        <tr>
            <th><?php echo $this->translate('Count'); ?></th>
            <th><?php echo $this->translate('String'); ?></th>
            <th><?php echo $this->translate('Correct'); ?></th>
            <th><?php echo $this->translate('Validate'); ?></th>
            <th><?php echo $this->translate('Remove'); ?></th>
        </tr>
    </thead>
    <tbody>
        <?php while ($string = $stringsStmt->fetch()): ?>
        <?php
        $stringQuery = $itemQuery;
        $stringQuery['property'][] = ['joiner' => 'and', 'property' => $property->id(), 'type' => 'eq', 'text' => $string[1]];
        ?>
        <tr>
            <td><?php echo $string[0]; ?></td>
            <td><pre><?php echo $string[1]; ?></pre></td>
            <td><textarea class="correction-string" data-name="<?php echo $this->escapeHtml($string[1]); ?>"></textarea></td>
            <td>
                <button type="button" class="validate-button"><?php echo $this->translate('Validate'); ?></button>
                <select class="validate-key">
                    <option value="@value">With @value</option>
                    <option value="@id">With @id</option>
                    <option value="value_resource_id">With value_resource_id</option>
                </select>
            </td>
            <td><input type="checkbox" class="removal-string" data-name="<?php echo $this->escapeHtml($string[1]); ?>" value="1"></td>
        </tr>
        <?php endwhile; ?>
    </tbody>
    </table>
<?php echo $this->form()->closeTag(); ?>
<script>
const form = document.getElementById('audit-form');
const table = document.getElementById('strings-table');

// Handle form submission.
form.addEventListener('submit', function(e) {
    // Populate corrections input.
    let corrections = {};
    const correctionsCollection = document.getElementsByClassName('correction-string');
    for (let correction of correctionsCollection) {
        if ('' !== correction.value) {
            corrections[correction.dataset.name] = correction.value;
        }
    }
    document.getElementById('corrections').value = JSON.stringify(corrections);
    // Populate removals input.
    let removals = [];
    const removalsCollection = document.getElementsByClassName('removal-string');
    for (let removal of removalsCollection) {
        if (removal.checked) {
            removals.push(removal.dataset.name);
        }
    }
    document.getElementById('removals').value = JSON.stringify(removals);
});
// Handle validation button click.
form.addEventListener('click', function(e) {
    if (!e.target.classList.contains('validate-button')) {
        return;
    }
    e.preventDefault();
    const formData = new FormData();
    formData.append('value', e.target.closest('tr').querySelector('.correction-string').value);
    formData.append('key', e.target.nextElementSibling.value);
    formData.append('data_type_name', document.getElementById('data_type_name').value);
    fetch(form.dataset.validateUrl, {
        method: 'POST',
        body: formData
    })
        .then(response => response.json())
        .then(data => {
            if (data.isValid) {
                e.target.style.backgroundColor = '#EFFDEF';
            } else {
                e.target.style.backgroundColor = '#FDEFEF';
            }
        });
});
// Use TableFilter library for filtering and sorting the values table.
// @see https://github.com/koalyptus/TableFilter
var tableFilter = new TableFilter(table, {
    base_path: table.dataset.tableFilterBasePath,
    col_2: 'none',
    col_3: 'none',
    col_4: 'none',
    alternate_rows: true,
    no_results_message: true,
    loader: true,
    rows_counter: {
        text: 'Rows: '
    },
    btn_reset: {
        text: 'Clear'
    },
     col_types: [
        'number', 'string', 'none', 'none', 'none'
    ],
    extensions: [{name: 'sort'}]
});
tableFilter.init();
</script>
