<?php
$tableFilterUrl = $this->assetUrl('vendor/tablefilter-0.7.2/tablefilter.js', 'DataCleaning');
$tableFilterBasePath = substr($tableFilterUrl, 0, strrpos($tableFilterUrl, '/') + 1);
$this->headScript()->appendFile($tableFilterUrl);
$pluralAuditColumns = ['value' => 'values', 'uri' => 'uris', 'value_resource_id' => 'value_resource_ids'];
?>
<?php echo sprintf(
    "<!--\nItem query: %s\nAudit column: %s\nProperty: %s\nData type: %s\n-->",
    http_build_query($itemQuery),
    $auditColumn,
    sprintf('%s (%s)', $property->label(), $property->term()),
    sprintf('%s (%s)', $dataType->getLabel(), $dataType->getName())
); ?>
<?php echo $this->pageTitle($this->translate('Audit data'), 1, $this->translate('Data Cleaning')); ?>
<p><?php echo sprintf(
    $this->translate('You are auditing %s unique %s (%s total) from %s items.'),
    $stringsUniqueCount,
    $pluralAuditColumns[$auditColumn],
    $stringsTotalCount,
    $this->hyperlink(count($itemIds), $this->url('admin/default', ['controller' => 'item', 'action' => 'browse'], ['query' => $itemQuery]))
); ?></p>
<button type="button" id="copy-all-button"><?php echo $this->translate('Copy all'); ?></button>
<button type="button" id="clear-all-button"><?php echo $this->translate('Clear all'); ?></button>
<?php echo $this->form()->openTag($form); ?>
    <?php echo $this->formCollection($form); ?>
    <div id="page-actions">
        <?php echo $this->hyperlink($this->translate('Cancel'), $this->url(null, ['action' => 'index'], true), ['class' => 'button']); ?>
        <button><?php echo $this->translate('Submit'); ?></button>
    </div>
    <table id="strings-table" style="display: none;" data-table-filter-base-path="<?php echo $this->escapeHtml($tableFilterBasePath); ?>">
    <colgroup>
        <col style="width: 8%;">
        <col style="width: 42%;">
        <col style="width: 42%;">
        <col style="width: 8%;">
    </colgroup>
    <thead>
        <tr>
            <th><?php echo $this->translate('Count'); ?></th>
            <th><?php echo sprintf($this->translate('From: %s'), $auditColumn); ?></th>
            <th><?php echo sprintf($this->translate('To: %s'), $auditColumn); ?></th>
            <th><?php echo $this->translate('Remove'); ?></th>
        </tr>
    </thead>
    <tbody>
        <?php while ($string = $stringsStmt->fetch()): ?>
        <tr>
            <td><?php echo $string[0]; ?></td>
            <td><pre style="white-space: pre-wrap;"><?php echo $string[1]; ?></pre></td>
            <td>
                <textarea class="correction-string" data-name="<?php echo $this->escapeHtml($string[1]); ?>" style="width: 100%;" rows="4"></textarea>
                <button type="button" class="copy-button"><?php echo $this->translate('Copy'); ?></button>
                <button type="button" class="clear-button"><?php echo $this->translate('Clear'); ?></button>
                <button type="button" class="validate-button"><?php echo $this->translate('Validate'); ?></button>
                <select class="validate-key">
                    <option value="@value"><?php echo $this->translate('with @value'); ?></option>
                    <option value="@id"><?php echo $this->translate('with @id'); ?></option>
                    <option value="value_resource_id"><?php echo $this->translate('with value_resource_id'); ?></option>
                </select>
            </td>
            <td><input type="checkbox" class="removal-string" data-name="<?php echo $this->escapeHtml($string[1]); ?>" value="1"></td>
        </tr>
        <?php endwhile; ?>
    </tbody>
    </table>
<?php echo $this->form()->closeTag(); ?>
<script>
const form = document.getElementById('audit-form');
const table = document.getElementById('strings-table');

// Handle form submission.
form.addEventListener('submit', function(e) {
    // Populate corrections input.
    let corrections = {};
    const correctionsCollection = document.getElementsByClassName('correction-string');
    for (let correction of correctionsCollection) {
        if ('' !== correction.value) {
            corrections[correction.dataset.name] = correction.value;
        }
    }
    document.getElementById('corrections').value = JSON.stringify(corrections);
    // Populate removals input.
    let removals = [];
    const removalsCollection = document.getElementsByClassName('removal-string');
    for (let removal of removalsCollection) {
        if (removal.checked) {
            removals.push(removal.dataset.name);
        }
    }
    document.getElementById('removals').value = JSON.stringify(removals);
});

// Handle button clicks.
form.addEventListener('click', function(e) {
    if (e.target.classList.contains('copy-button')) {
        e.preventDefault();
        copy(e.target);
    } else if (e.target.classList.contains('clear-button')) {
        e.preventDefault();
        clear(e.target);
    } else if (e.target.classList.contains('validate-button')) {
        e.preventDefault();
        const formData = new FormData();
        formData.append('value', e.target.closest('td').querySelector('.correction-string').value);
        formData.append('key', e.target.closest('td').querySelector('.validate-key').value);
        formData.append('data_type_name', document.getElementById('data_type_name').value);
        fetch(form.dataset.validateUrl, {
            method: 'POST',
            body: formData
        })
            .then(response => response.json())
            .then(data => {
                if (data.isValid) {
                    e.target.style.backgroundColor = '#EFFDEF';
                } else {
                    e.target.style.backgroundColor = '#FDEFEF';
                }
            });
    }
});

document.getElementById('copy-all-button').addEventListener('click', function(e) {
    e.preventDefault();
    const buttonCollection = document.getElementsByClassName('copy-button');
    for (let button of buttonCollection) {
        copy(button);
    }
});

document.getElementById('clear-all-button').addEventListener('click', function(e) {
    e.preventDefault();
    const buttonCollection = document.getElementsByClassName('clear-button');
    for (let button of buttonCollection) {
        clear(button);
    }
});

// Use TableFilter library for filtering and sorting the values table.
// @see https://github.com/koalyptus/TableFilter
var tableFilter = new TableFilter(table, {
    base_path: table.dataset.tableFilterBasePath,
    col_2: 'none',
    col_3: 'none',
    responsive: true,
    alternate_rows: true,
    no_results_message: true,
    ignore_diacritics: true,
    watermark: ['Filter', 'Filter'],
    auto_filter: {
        delay: 1000
    },
    rows_counter: {
        text: 'Rows: '
    },
    col_types: [
        'number', 'string', 'none', 'none'
    ],
    extensions: [
        {name: 'sort'}
    ]
});
// Display table when TableFilter is initialized.
tableFilter.emitter.on(['initialized'], () => {
    table.style.display = 'block';
});
tableFilter.init();

function copy(button) {
    const textarea = button.closest('td').querySelector('.correction-string');
    textarea.value = textarea.dataset.name;
}
function clear(button) {
    button.closest('td').querySelector('.correction-string').value = '';
}
</script>
